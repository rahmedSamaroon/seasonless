// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seasonless.Data;

namespace Seasonless.Migrations
{
    [DbContext(typeof(AppDb))]
    partial class AppDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Seasonless.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID");

                    b.Property<string>("CustomerName");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Seasonless.Models.CustomerSummary", b =>
                {
                    b.Property<int>("CustomerID");

                    b.Property<int>("SeasonID");

                    b.Property<int>("Credit");

                    b.Property<int>("TotalRepaid");

                    b.HasKey("CustomerID", "SeasonID");

                    b.HasIndex("SeasonID");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("Seasonless.Models.Repayment", b =>
                {
                    b.Property<int>("RepaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("ParentID");

                    b.Property<int>("SeasonID");

                    b.HasKey("RepaymentID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ParentID");

                    b.HasIndex("SeasonID");

                    b.ToTable("Repayments");
                });

            modelBuilder.Entity("Seasonless.Models.RepaymentUpload", b =>
                {
                    b.Property<int>("RepaymentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CustomerID");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsValid");

                    b.Property<int?>("Reason");

                    b.Property<int>("SeasonID");

                    b.HasKey("RepaymentID");

                    b.ToTable("RepaymentUploads");
                });

            modelBuilder.Entity("Seasonless.Models.Season", b =>
                {
                    b.Property<int>("SeasonID");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("SeasonName");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("SeasonID");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Seasonless.Models.CustomerSummary", b =>
                {
                    b.HasOne("Seasonless.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seasonless.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Seasonless.Models.Repayment", b =>
                {
                    b.HasOne("Seasonless.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Seasonless.Models.Repayment", "ParentRepayment")
                        .WithMany()
                        .HasForeignKey("ParentID");

                    b.HasOne("Seasonless.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
